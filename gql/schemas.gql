directive @date(format: String) on FIELD_DEFINITION

directive @constraint(minLength: Int, maxLength: Int, startsWith: String, endsWith: String, contains: String, notContains: String, pattern: String, format: String, min: Int, max: Int, exclusiveMin: Int, exclusiveMax: Int, multipleOf: Int) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type AccessTokenRes {
    accessToken: String
    exp: Int
    iat: Int
}

type App2WxappLoginStrategy {
    ticketExpriresAfter: Int
    ticketExchangeUserInfoNeedSecret: Boolean
}

input App2WxappLoginStrategyInput {
    ticketExpriresAfter: Int
    ticketExchangeUserInfoNeedSecret: Boolean
}

type AuthorizedResource {
    code: String!
    type: ResourceType
    actions: [String!]
}

input AuthorizedTargetsActionsInput {
    op: Operator!
    list: [String]!
}

input AuthorizeResourceOpt {
    targetType: PolicyAssignmentTargetType!
    targetIdentifier: String!
    actions: [String!]
}

"""批量删除返回结果"""
type BatchOperationResult {
    """删除成功的个数"""
    succeedCount: Int!

    """删除失败的个数"""
    failedCount: Int!
    message: String
    errors: [String!]
}

type ChangeEmailStrategy {
    verifyOldEmail: Boolean
}

input ChangeEmailStrategyInput {
    verifyOldEmail: Boolean
}

type ChangePhoneStrategy {
    verifyOldPhone: Boolean
}

input ChangePhoneStrategyInput {
    verifyOldPhone: Boolean
}

type CheckPasswordStrengthResult {
    valid: Boolean!
    message: String
}

type CommonMessage {
    """可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志"""
    message: String

    """
    业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
    [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
    """
    code: Int
}

input ConfigEmailTemplateInput {
    """邮件模版类型"""
    type: EmailTemplateType!

    """模版名称"""
    name: String!

    """邮件主题"""
    subject: String!

    """显示的邮件发送人"""
    sender: String!

    """邮件模版内容"""
    content: String!

    """重定向链接，操作成功后，用户将被重定向到此 URL。"""
    redirectTo: String
    hasURL: Boolean

    """验证码过期时间（单位为秒）"""
    expiresIn: Int
}

input CreateFunctionInput {
    """函数名称"""
    name: String!

    """源代码"""
    sourceCode: String!

    """描述信息"""
    description: String

    """云函数链接"""
    url: String
}

input CreateSocialConnectionInput {
    provider: String!
    name: String!
    logo: String!
    description: String
    fields: [SocialConnectionFieldInput!]
}

input CreateSocialConnectionInstanceFieldInput {
    key: String!
    value: String!
}

input CreateSocialConnectionInstanceInput {
    """社会化登录 provider"""
    provider: String!
    fields: [CreateSocialConnectionInstanceFieldInput]
}

input CreateUserInput {
    """用户名，用户池内唯一"""
    username: String

    """邮箱，不区分大小写，如 Bob@example.com 和 bob@example.com 会识别为同一个邮箱。用户池内唯一。"""
    email: String

    """邮箱是否已验证"""
    emailVerified: Boolean

    """手机号，用户池内唯一"""
    phone: String

    """手机号是否已验证"""
    phoneVerified: Boolean
    unionid: String
    openid: String

    """昵称，该字段不唯一。"""
    nickname: String

    """头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png"""
    photo: String
    password: String

    """注册方式"""
    registerSource: [String!]
    browser: String

    """用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。"""
    oauth: String

    """用户累计登录次数，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。"""
    loginsCount: Int
    lastLogin: String
    company: String
    lastIP: String

    """用户注册时间，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。"""
    signedUp: String
    blocked: Boolean
    isDeleted: Boolean
    device: String
    name: String
    givenName: String
    familyName: String
    middleName: String
    profile: String
    preferredUsername: String
    website: String
    gender: String
    birthdate: String
    zoneinfo: String
    locale: String
    address: String
    formatted: String
    streetAddress: String
    locality: String
    region: String
    postalCode: String
    country: String
    externalId: String
}

type CustomSMSProvider {
    enabled: Boolean
    provider: String
    config: String
}

input CustomSMSProviderInput {
    enabled: Boolean
    provider: String
    config: String
}

"""邮件使用场景"""
enum EmailScene {
    """发送重置密码邮件，邮件中包含验证码"""
    RESET_PASSWORD

    """发送验证邮箱的邮件"""
    VERIFY_EMAIL

    """发送修改邮箱邮件，邮件中包含验证码"""
    CHANGE_EMAIL

    """发送 MFA 验证邮件"""
    MFA_VERIFY
}

type EmailTemplate {
    """邮件模版类型"""
    type: EmailTemplateType!

    """模版名称"""
    name: String!

    """邮件主题"""
    subject: String!

    """显示的邮件发送人"""
    sender: String!

    """邮件模版内容"""
    content: String!

    """重定向链接，操作成功后，用户将被重定向到此 URL。"""
    redirectTo: String
    hasURL: Boolean

    """验证码过期时间（单位为秒）"""
    expiresIn: Int

    """是否开启（自定义模版）"""
    enabled: Boolean

    """是否是系统默认模版"""
    isSystem: Boolean
}

enum EmailTemplateType {
    """重置密码确认"""
    RESET_PASSWORD

    """重置密码通知"""
    PASSWORD_RESETED_NOTIFICATION

    """修改密码验证码"""
    CHANGE_PASSWORD

    """注册欢迎邮件"""
    WELCOME

    """验证邮箱"""
    VERIFY_EMAIL

    """修改绑定邮箱"""
    CHANGE_EMAIL
}

type FrequentRegisterCheckConfig {
    timeInterval: Int
    limit: Int
    enabled: Boolean
}

input FrequentRegisterCheckConfigInput {
    timeInterval: Int
    limit: Int
    enabled: Boolean
}

"""函数"""
type Function {
    """ID"""
    id: String!

    """函数名称"""
    name: String!

    """源代码"""
    sourceCode: String!

    """描述信息"""
    description: String

    """云函数链接"""
    url: String
}

type Group {
    """唯一标志 code"""
    code: String!

    """名称"""
    name: String!

    """描述"""
    description: String

    """创建时间"""
    createdAt: String

    """修改时间"""
    updatedAt: String

    """包含的用户列表"""
    users(page: Int, limit: Int): PaginatedUsers!

    """被授权访问的所有资源"""
    authorizedResources(namespace: String, resourceType: String): PaginatedAuthorizedResources
}

type Identity {
    openid: String
    userIdInIdp: String
    userId: String
    extIdpId: String
    isSocial: Boolean
    provider: String
    userPoolId: String
    refreshToken: String
    accessToken: String
}

type JWTTokenStatus {
    code: Int
    message: String
    status: Boolean
    exp: Int
    iat: Int
    data: JWTTokenStatusDetail
}

type JWTTokenStatusDetail {
    id: String
    userPoolId: String
    arn: String
}

type KeyValuePair {
    key: String!
    value: String!
}

input LoginByEmailInput {
    email: String!
    password: String!

    """图形验证码"""
    captchaCode: String

    """如果用户不存在，是否自动创建一个账号"""
    autoRegister: Boolean
    clientIp: String

    """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
    params: String

    """请求上下文信息，将会传递到 pipeline 中"""
    context: String
}

input LoginByPhoneCodeInput {
    phone: String!
    code: String!

    """如果用户不存在，是否自动创建一个账号"""
    autoRegister: Boolean
    clientIp: String

    """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
    params: String

    """请求上下文信息，将会传递到 pipeline 中"""
    context: String
}

input LoginByPhonePasswordInput {
    phone: String!
    password: String!

    """图形验证码"""
    captchaCode: String

    """如果用户不存在，是否自动创建一个账号"""
    autoRegister: Boolean
    clientIp: String

    """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
    params: String

    """请求上下文信息，将会传递到 pipeline 中"""
    context: String
}

input LoginByUsernameInput {
    username: String!
    password: String!

    """图形验证码"""
    captchaCode: String

    """如果用户不存在，是否自动创建一个账号"""
    autoRegister: Boolean
    clientIp: String

    """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
    params: String

    """请求上下文信息，将会传递到 pipeline 中"""
    context: String
}

type LoginFailCheckConfig {
    timeInterval: Int
    limit: Int
    enabled: Boolean
}

input LoginFailCheckConfigInput {
    timeInterval: Int
    limit: Int
    enabled: Boolean
}

type LoginPasswordFailCheckConfig {
    timeInterval: Int
    limit: Int
    enabled: Boolean
}

input LoginPasswordFailCheckConfigInput {
    timeInterval: Int
    limit: Int
    enabled: Boolean
}

type Mfa {
    """MFA ID"""
    id: String!

    """用户 ID"""
    userId: String!

    """用户池 ID"""
    userPoolId: String!

    """是否开启 MFA"""
    enable: Boolean!

    """密钥"""
    secret: String
}

type Mutation {
    """允许操作某个资源"""
    allow(
        resource: String!
        action: String!
        userId: String
        userIds: [String!]
        roleCode: String
        roleCodes: [String!]

        """权限组 code"""
        namespace: String
    ): CommonMessage!

    """将一个（类）资源授权给用户、角色、分组、组织机构，且可以分别指定不同的操作权限。"""
    authorizeResource(
        """权限分组"""
        namespace: String

        """资源类型"""
        resourceType: ResourceType

        """资源 code"""
        resource: String
        opts: [AuthorizeResourceOpt]
    ): CommonMessage!

    """配置社会化登录"""
    createSocialConnectionInstance(input: CreateSocialConnectionInstanceInput!): SocialConnectionInstance!

    """开启社会化登录"""
    enableSocialConnectionInstance(provider: String!): SocialConnectionInstance!

    """关闭社会化登录"""
    disableSocialConnectionInstance(provider: String!): SocialConnectionInstance!

    """设置用户在某个组织机构内所在的主部门"""
    setMainDepartment(userId: String!, departmentId: String): CommonMessage!

    """配置自定义邮件模版"""
    configEmailTemplate(input: ConfigEmailTemplateInput!): EmailTemplate!

    """启用自定义邮件模版"""
    enableEmailTemplate(
        """邮件模版类型"""
        type: EmailTemplateType!
    ): EmailTemplate!

    """停用自定义邮件模版（将会使用系统默认邮件模版）"""
    disableEmailTemplate(
        """邮件模版类型"""
        type: EmailTemplateType!
    ): EmailTemplate!

    """发送邮件"""
    sendEmail(email: String!, scene: EmailScene!): CommonMessage!

    """管理员发送首次登录验证邮件"""
    sendFirstLoginVerifyEmail(userId: String!, appId: String!): CommonMessage!

    """创建函数"""
    createFunction(input: CreateFunctionInput!): Function

    """修改函数"""
    updateFunction(input: UpdateFunctionInput!): Function!
    deleteFunction(id: String!): CommonMessage!
    addUserToGroup(
        """用户 ID，如果不填返回用户池的权限列表"""
        userIds: [String!]!
        code: String
    ): CommonMessage!
    removeUserFromGroup(
        """用户 ID，如果不填返回用户池的权限列表"""
        userIds: [String!]!
        code: String
    ): CommonMessage!

    """创建角色"""
    createGroup(
        """唯一标志"""
        code: String!

        """名称"""
        name: String!

        """描述"""
        description: String
    ): Group!

    """修改角色"""
    updateGroup(code: String!, name: String, description: String, newCode: String): Group!

    """批量删除角色"""
    deleteGroups(codeList: [String!]!): CommonMessage!
    loginByEmail(input: LoginByEmailInput!): User
    loginByUsername(input: LoginByUsernameInput!): User
    loginByPhoneCode(input: LoginByPhoneCodeInput!): User
    loginByPhonePassword(input: LoginByPhonePasswordInput!): User

    """修改 MFA 信息"""
    changeMfa(
        """是否开启 MFA"""
        enable: Boolean

        """MFA ID"""
        id: String

        """用户 ID"""
        userId: String

        """用户池 ID"""
        userPoolId: String

        """是否刷新密钥"""
        refresh: Boolean
    ): Mfa

    """创建组织机构"""
    createOrg(
        """组织机构名称"""
        name: String!

        """唯一标志，会作为根节点的 code"""
        code: String

        """描述信息，可选。"""
        description: String
    ): Org!

    """删除组织机构"""
    deleteOrg(
        """组织机构 ID"""
        id: String!
    ): CommonMessage!

    """添加子节点"""
    addNode(
        """组织机构 ID"""
        orgId: String!

        """父节点 ID，不填默认为根节点"""
        parentNodeId: String

        """节点名称"""
        name: String!

        """多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。"""
        nameI18n: String

        """描述信息"""
        description: String

        """多语言描述信息"""
        descriptionI18n: String

        """在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)"""
        order: Int

        """节点唯一标志码，可以通过 code 进行搜索"""
        code: String
    ): Org!

    """添加子节点"""
    addNodeV2(
        """组织机构 ID"""
        orgId: String!

        """父节点 ID，不填默认为根节点"""
        parentNodeId: String

        """节点名称"""
        name: String!

        """多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。"""
        nameI18n: String

        """描述信息"""
        description: String

        """多语言描述信息"""
        descriptionI18n: String

        """在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)"""
        order: Int

        """节点唯一标志码，可以通过 code 进行搜索"""
        code: String
    ): Node!

    """修改节点"""
    updateNode(id: String!, name: String, code: String, description: String): Node!

    """删除节点（会一并删掉子节点）"""
    deleteNode(
        """组织机构 ID"""
        orgId: String!

        """节点 ID"""
        nodeId: String!
    ): CommonMessage!

    """（批量）将成员添加到节点中"""
    addMember(
        """节点 ID"""
        nodeId: String

        """组织机构 ID"""
        orgId: String

        """节点 Code"""
        nodeCode: String

        """用户 ID 列表"""
        userIds: [String!]!

        """是否设置为 Leade"""
        isLeader: Boolean = false
    ): Node!

    """（批量）将成员从节点中移除"""
    removeMember(
        """节点 ID"""
        nodeId: String

        """组织机构 ID"""
        orgId: String

        """节点 Code"""
        nodeCode: String

        """用户 ID 列表"""
        userIds: [String!]!
    ): Node!
    moveMembers(userIds: [String!]!, sourceNodeId: String!, targetNodeId: String!): CommonMessage
    moveNode(
        """组织机构 ID"""
        orgId: String!

        """需要移动的节点 ID"""
        nodeId: String!

        """目标父节点 ID"""
        targetParentId: String!
    ): Org!
    resetPassword(
        """手机号"""
        phone: String

        """邮箱"""
        email: String

        """手机号验证码 / 邮件验证码"""
        code: String!

        """加密过后的新密码"""
        newPassword: String!
    ): CommonMessage

    """通过首次登录的 Token 重置密码"""
    resetPasswordByFirstLoginToken(token: String!, password: String!): CommonMessage
    createPolicy(
        """权限组 code"""
        namespace: String
        code: String!
        description: String
        statements: [PolicyStatementInput!]!
    ): Policy!
    updatePolicy(
        """权限组 code"""
        namespace: String
        code: String!
        description: String
        statements: [PolicyStatementInput!]
        newCode: String
    ): Policy!
    deletePolicy(code: String!, namespace: String): CommonMessage!
    deletePolicies(codeList: [String!]!, namespace: String): CommonMessage!
    addPolicyAssignments(
        policies: [String!]!
        targetType: PolicyAssignmentTargetType!
        targetIdentifiers: [String!]

        """是否被子节点继承（此参数只在授权对象为组织机构时有效）"""
        inheritByChildren: Boolean

        """权限组 code"""
        namespace: String
    ): CommonMessage!

    """开启授权"""
    enablePolicyAssignment(
        """策略的 code"""
        policy: String!

        """目标对象类型"""
        targetType: PolicyAssignmentTargetType!

        """目标对象的唯一标志符"""
        targetIdentifier: String!

        """权限组 code"""
        namespace: String
    ): CommonMessage!

    """开启授权"""
    disbalePolicyAssignment(
        """策略的 code"""
        policy: String!

        """目标对象类型"""
        targetType: PolicyAssignmentTargetType!

        """目标对象的唯一标志符"""
        targetIdentifier: String!

        """权限组 code"""
        namespace: String
    ): CommonMessage!
    removePolicyAssignments(
        policies: [String!]!
        targetType: PolicyAssignmentTargetType!
        targetIdentifiers: [String!]

        """权限组 code"""
        namespace: String
    ): CommonMessage!
    registerByUsername(input: RegisterByUsernameInput!): User
    registerByEmail(input: RegisterByEmailInput!): User
    registerByPhoneCode(input: RegisterByPhoneCodeInput!): User

    """创建角色"""
    createRole(
        """权限组 code"""
        namespace: String

        """唯一标志"""
        code: String!

        """描述"""
        description: String

        """父角色代码"""
        parent: String
    ): Role!

    """修改角色"""
    updateRole(code: String!, description: String, newCode: String, namespace: String): Role!

    """删除角色"""
    deleteRole(code: String!, namespace: String): CommonMessage!

    """批量删除角色"""
    deleteRoles(codeList: [String!]!, namespace: String): CommonMessage!

    """给用户授权角色"""
    assignRole(
        """权限组 code"""
        namespace: String

        """角色 code"""
        roleCode: String

        """角色 code 列表"""
        roleCodes: [String]

        """用户 ID 列表"""
        userIds: [String!]

        """角色列表"""
        groupCodes: [String!]

        """组织机构节点列表"""
        nodeCodes: [String!]
    ): CommonMessage

    """撤销角色"""
    revokeRole(
        """权限组 code"""
        namespace: String

        """角色 code"""
        roleCode: String

        """角色 code 列表"""
        roleCodes: [String]

        """用户 ID 列表"""
        userIds: [String!]

        """分组列表"""
        groupCodes: [String!]

        """组织机构节点列表"""
        nodeCodes: [String!]
    ): CommonMessage

    """使用子账号登录"""
    loginBySubAccount(
        """子账号用户名"""
        account: String!

        """子账号密码"""
        password: String!

        """图形验证码"""
        captchaCode: String

        """客户端真实 IP"""
        clientIp: String
    ): User!
    setUdf(targetType: UDFTargetType!, key: String!, dataType: UDFDataType!, label: String!, options: String): UserDefinedField!
    removeUdf(targetType: UDFTargetType!, key: String!): CommonMessage
    setUdv(targetType: UDFTargetType!, targetId: String!, key: String!, value: String!): [UserDefinedData!]
    setUdfValueBatch(targetType: UDFTargetType!, input: [SetUdfValueBatchInput!]!): CommonMessage
    removeUdv(targetType: UDFTargetType!, targetId: String!, key: String!): [UserDefinedData!]
    setUdvBatch(targetType: UDFTargetType!, targetId: String!, udvList: [UserDefinedDataInput!]): [UserDefinedData!]
    refreshToken(id: String): RefreshToken

    """创建用户。此接口需要管理员权限，普通用户注册请使用 **register** 接口。"""
    createUser(
        userInfo: CreateUserInput!

        """
        是否保留密码，不使用 Authing 默认的加密方式。当你希望使用[自定义密码加密函数](https://docs.authing.co/security/config-pwd-encrypt-function.html)或不希望加密密码（不推荐）时可以设置此参数为 true。
        """
        keepPassword: Boolean

        """初次登录要求重置密码"""
        resetPasswordOnFirstLogin: Boolean

        """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
        params: String
    ): User!

    """更新用户信息。"""
    updateUser(
        """用户 ID"""
        id: String

        """需要修改的用户字段"""
        input: UpdateUserInput!
    ): User!

    """修改用户密码，此接口需要验证原始密码，管理员直接修改请使用 **updateUser** 接口。"""
    updatePassword(
        """需要设置的新密码"""
        newPassword: String!

        """原始密码"""
        oldPassword: String
    ): User!

    """绑定手机号，调用此接口需要当前用户未绑定手机号"""
    bindPhone(
        """手机号"""
        phone: String!

        """验证码"""
        phoneCode: String!
    ): User!

    """绑定邮箱"""
    bindEmail(
        """邮箱"""
        email: String!

        """验证码"""
        emailCode: String!
    ): User!

    """解绑定手机号，调用此接口需要当前用户已绑定手机号并且绑定了其他登录方式"""
    unbindPhone: User!

    """修改手机号。此接口需要验证手机号验证码，管理员直接修改请使用 **updateUser** 接口。"""
    updatePhone(
        """需要更换为的手机号"""
        phone: String!

        """需要更换为手机号的短信验证码"""
        phoneCode: String!

        """
        原始手机号。如果用户关闭了「修改邮箱时是否验证旧手机」选项，此项可以不填 ![](https://cdn.authing.cn/blog/20200713140926.png)
        """
        oldPhone: String

        """
        原始手机号验证码。如果用户关闭了「修改邮箱时是否验证旧手机」选项，此项可以不填 ![](https://cdn.authing.cn/blog/20200713140926.png)
        """
        oldPhoneCode: String
    ): User!

    """修改邮箱。此接口需要验证邮箱验证码，管理员直接修改请使用 updateUser 接口。"""
    updateEmail(
        email: String!
        emailCode: String!

        """
        原始邮箱。如果用户关闭了「修改邮箱时是否验证旧邮箱」选项，此项可以不填 ![](https://cdn.authing.cn/blog/20200713140624.png)
        """
        oldEmail: String

        """
        原始邮箱验证码。果用户关闭了「修改邮箱时是否验证旧邮箱」选项，此项可以不填 ![](https://cdn.authing.cn/blog/20200713140624.png)
        """
        oldEmailCode: String
    ): User!

    """解绑定邮箱"""
    unbindEmail: User!

    """删除用户"""
    deleteUser(
        """用户 ID"""
        id: String!
    ): CommonMessage

    """批量删除用户"""
    deleteUsers(
        """用户 ID 列表"""
        ids: [String!]!
    ): CommonMessage

    """创建用户池"""
    createUserpool(
        """名称"""
        name: String!

        """二级域名"""
        domain: String!

        """描述"""
        description: String

        """用户池 logo"""
        logo: String

        """用户池类型列表"""
        userpoolTypes: [String!]
    ): UserPool!
    updateUserpool(
        """更新字段"""
        input: UpdateUserpoolInput!
    ): UserPool!
    refreshUserpoolSecret: String!
    deleteUserpool: CommonMessage!
    refreshAccessToken(accessToken: String): RefreshAccessTokenRes!
    addWhitelist(type: WhitelistType!, list: [String!]!): [WhiteList]!
    removeWhitelist(type: WhitelistType!, list: [String!]!): [WhiteList]!
}

type Node {
    id: String!

    """组织机构 ID"""
    orgId: String

    """节点名称"""
    name: String!

    """多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。"""
    nameI18n: String

    """描述信息"""
    description: String

    """多语言描述信息"""
    descriptionI18n: String

    """在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)"""
    order: Int

    """节点唯一标志码，可以通过 code 进行搜索"""
    code: String

    """是否为根节点"""
    root: Boolean

    """
    距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
    """
    depth: Int
    path: [String!]!
    codePath: [String]!
    namePath: [String!]!
    createdAt: String
    updatedAt: String

    """该节点的子节点 **ID** 列表"""
    children: [String!]

    """节点的用户列表"""
    users(
        """页码数（one-based），默认为 1"""
        page: Int = 1

        """每页数目，默认为 10"""
        limit: Int = 10

        """排序方式，默认为 CREATEDAT_DESC（按照创建时间降序）"""
        sortBy: SortByEnum = CREATEDAT_DESC

        """是否包含子节点的用户，默认为 false"""
        includeChildrenNodes: Boolean = true
    ): PaginatedUsers!

    """被授权访问的所有资源"""
    authorizedResources(namespace: String, resourceType: String): PaginatedAuthorizedResources
}

scalar Object

enum Operator {
    AND
    OR
}

type Org {
    """组织机构 ID"""
    id: String!

    """根节点"""
    rootNode: Node!

    """组织机构节点列表"""
    nodes: [Node!]!
}

type PaginatedAuthorizedResources {
    totalCount: Int!
    list: [AuthorizedResource!]!
}

type PaginatedAuthorizedTargets {
    list: [ResourcePermissionAssignment]
    totalCount: Int
}

type PaginatedDepartments {
    list: [UserDepartment!]!
    totalCount: Int!
}

type PaginatedFunctions {
    list: [Function!]!
    totalCount: Int!
}

type PaginatedGroups {
    totalCount: Int!
    list: [Group!]!
}

type PaginatedOrgs {
    totalCount: Int!
    list: [Org!]!
}

type PaginatedPolicies {
    totalCount: Int!
    list: [Policy!]!
}

type PaginatedPolicyAssignments {
    totalCount: Int!
    list: [PolicyAssignment!]!
}

type PaginatedRoles {
    totalCount: Int!
    list: [Role!]!
}

type PaginatedUserpool {
    totalCount: Int!
    list: [UserPool!]!
}

type PaginatedUsers {
    totalCount: Int!
    list: [User!]!
}

type Policy {
    """权限组 code"""
    namespace: String!
    code: String!
    isDefault: Boolean!
    description: String
    statements: [PolicyStatement!]!
    createdAt: String
    updatedAt: String

    """被授权次数"""
    assignmentsCount: Int!

    """授权记录"""
    assignments(page: Int, limit: Int, namespace: String): [PolicyAssignment!]!
}

type PolicyAssignment {
    code: String!
    targetType: PolicyAssignmentTargetType!
    targetIdentifier: String!
}

enum PolicyAssignmentTargetType {
    USER
    ROLE
    GROUP
    ORG
    AK_SK
}

enum PolicyEffect {
    ALLOW
    DENY
}

type PolicyStatement {
    resource: String!
    actions: [String!]!
    effect: PolicyEffect
    condition: [PolicyStatementCondition!]
}

type PolicyStatementCondition {
    param: String!
    operator: String!
    value: Object!
}

input PolicyStatementConditionInput {
    param: String!
    operator: String!
    value: Object!
}

input PolicyStatementInput {
    resource: String!
    actions: [String!]!
    effect: PolicyEffect
    condition: [PolicyStatementConditionInput!]
}

type QrcodeLoginStrategy {
    qrcodeExpiresAfter: Int
    returnFullUserInfo: Boolean
    allowExchangeUserInfoFromBrowser: Boolean
    ticketExpiresAfter: Int
}

input QrcodeLoginStrategyInput {
    qrcodeExpiresAfter: Int
    returnFullUserInfo: Boolean
    allowExchangeUserInfoFromBrowser: Boolean
    ticketExpiresAfter: Int
}

type Query {
    isActionAllowed(
        resource: String!
        action: String!
        userId: String!

        """权限组 code"""
        namespace: String
    ): Boolean!
    isActionDenied(
        resource: String!
        action: String!
        userId: String!

        """权限组 code"""
        namespace: String
    ): Boolean!
    authorizedTargets(
        namespace: String!
        resourceType: ResourceType!

        """资源 code"""
        resource: String!
        targetType: PolicyAssignmentTargetType
        actions: AuthorizedTargetsActionsInput
    ): PaginatedAuthorizedTargets
    qiniuUptoken(type: String): String
    isDomainAvaliable(domain: String!): Boolean

    """获取社会化登录定义"""
    socialConnection(provider: String!): SocialConnection

    """获取所有社会化登录定义"""
    socialConnections: [SocialConnection!]!

    """获取当前用户池的社会化登录配置"""
    socialConnectionInstance(provider: String!): SocialConnectionInstance!

    """获取当前用户池的所有社会化登录配置"""
    socialConnectionInstances: [SocialConnectionInstance!]!
    emailTemplates: [EmailTemplate!]!
    previewEmail(type: EmailTemplateType!): String!

    """获取函数模版"""
    templateCode: String!
    function(id: String): Function
    functions(
        """页码数（one-based），默认为 1"""
        page: Int = 1

        """每页数目，默认为 10"""
        limit: Int = 10

        """排序方式，默认为 CREATEDAT_DESC（按照创建时间降序）"""
        sortBy: SortByEnum = CREATEDAT_DESC
    ): PaginatedFunctions!
    group(code: String!): Group
    groups(
        """用户 ID，如果不填返回用户池的权限列表"""
        userId: String

        """页码数（one-based），默认为 1"""
        page: Int = 1

        """每页数目，默认为 10"""
        limit: Int = 10

        """排序方式，默认为 CREATEDAT_DESC（按照创建时间降序）"""
        sortBy: SortByEnum = CREATEDAT_DESC
    ): PaginatedGroups!

    """查询 MFA 信息"""
    queryMfa(
        """MFA ID"""
        id: String

        """用户 ID"""
        userId: String

        """用户池 ID"""
        userPoolId: String
    ): Mfa
    nodeById(id: String!): Node

    """通过 code 查询节点"""
    nodeByCode(
        """组织机构 ID"""
        orgId: String!

        """节点在组织机构内的唯一标志"""
        code: String!
    ): Node

    """查询组织机构详情"""
    org(id: String!): Org!

    """查询用户池组织机构列表"""
    orgs(
        """页码数（one-based），默认为 1"""
        page: Int = 1

        """每页数目，默认为 10"""
        limit: Int = 10

        """排序方式，默认为 CREATEDAT_DESC（按照创建时间降序）"""
        sortBy: SortByEnum = CREATEDAT_DESC
    ): PaginatedOrgs!

    """查询子节点列表"""
    childrenNodes(
        """组织机构 ID（已废弃）"""
        orgId: String

        """节点 ID"""
        nodeId: String!
    ): [Node!]!
    rootNode(orgId: String!): Node!
    isRootNode(nodeId: String!, orgId: String!): Boolean
    searchNodes(keyword: String!): [Node!]!
    checkPasswordStrength(password: String!): CheckPasswordStrengthResult!
    policy(code: String!, namespace: String): Policy
    policies(page: Int, limit: Int, namespace: String, excludeDefault: Boolean): PaginatedPolicies!
    policyAssignments(
        """权限组 code"""
        namespace: String
        code: String
        targetType: PolicyAssignmentTargetType
        targetIdentifier: String
        page: Int
        limit: Int
    ): PaginatedPolicyAssignments!

    """获取一个对象被授权的资源列表"""
    authorizedResources(targetType: PolicyAssignmentTargetType, targetIdentifier: String, namespace: String, resourceType: String): PaginatedAuthorizedResources

    """通过 **code** 查询角色详情"""
    role(code: String!, namespace: String): Role

    """获取角色列表"""
    roles(
        """权限组 code"""
        namespace: String

        """页码数（one-based），默认为 1"""
        page: Int = 1

        """每页数目，默认为 10"""
        limit: Int = 10

        """排序方式，默认为 CREATEDAT_DESC（按照创建时间降序）"""
        sortBy: SortByEnum = CREATEDAT_DESC
    ): PaginatedRoles!

    """查询某个实体定义的自定义数据"""
    udv(targetType: UDFTargetType!, targetId: String!): [UserDefinedData!]!

    """查询用户池定义的自定义字段"""
    udf(targetType: UDFTargetType!): [UserDefinedField!]!

    """批量查询多个对象的自定义数据"""
    udfValueBatch(targetType: UDFTargetType!, targetIds: [String]!): [UserDefinedDataMap!]!
    user(
        """用户 ID"""
        id: String
    ): User
    userBatch(
        """用户 ID 列表"""
        ids: [String!]!
        type: String
    ): [User!]!
    users(
        """页码数（one-based），默认为 1"""
        page: Int

        """每页数目，默认为 10"""
        limit: Int

        """排序方式，默认为 CREATEDAT_DESC（按照创建时间降序）"""
        sortBy: SortByEnum = CREATEDAT_DESC
    ): PaginatedUsers!

    """已归档的用户列表"""
    archivedUsers(
        """页码数（one-based），默认为 1"""
        page: Int

        """每页数目，默认为 10"""
        limit: Int
    ): PaginatedUsers!
    searchUser(
        """查询内容"""
        query: String!

        """搜索的字段"""
        fields: [String]

        """页码数（one-based），默认为 1"""
        page: Int

        """每页数目，默认为 10"""
        limit: Int

        """所在的部门 ID 列表"""
        departmentOpts: [SearchUserDepartmentOpt]

        """所在的分组列表"""
        groupOpts: [SearchUserGroupOpt]

        """所在的角色列表"""
        roleOpts: [SearchUserRoleOpt]
    ): PaginatedUsers!
    checkLoginStatus(token: String): JWTTokenStatus
    isUserExists(email: String, phone: String, username: String, externalId: String): Boolean
    findUser(email: String, phone: String, username: String, externalId: String): User

    """查询用户池详情"""
    userpool: UserPool!

    """查询用户池列表"""
    userpools(
        """页码数（one-based），默认为 1"""
        page: Int

        """每页数目，默认为 10"""
        limit: Int

        """排序方式，默认为 CREATEDAT_DESC（按照创建时间降序）"""
        sortBy: SortByEnum = CREATEDAT_DESC
    ): PaginatedUserpool!
    userpoolTypes: [UserPoolType!]!

    """获取 accessToken ，如 SDK 初始化"""
    accessToken(userPoolId: String!, secret: String!): AccessTokenRes!

    """用户池注册白名单列表"""
    whitelist(
        """白名单类型"""
        type: WhitelistType!
    ): [WhiteList!]!
}

type RefreshAccessTokenRes {
    accessToken: String
    exp: Int
    iat: Int
}

type RefreshToken {
    token: String
    iat: Int
    exp: Int
}

input RegisterByEmailInput {
    email: String!
    password: String!
    profile: RegisterProfile
    forceLogin: Boolean
    generateToken: Boolean
    clientIp: String

    """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
    params: String

    """请求上下文信息，将会传递到 pipeline 中"""
    context: String
}

input RegisterByPhoneCodeInput {
    phone: String!
    code: String!
    password: String
    profile: RegisterProfile
    forceLogin: Boolean
    generateToken: Boolean
    clientIp: String

    """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
    params: String

    """请求上下文信息，将会传递到 pipeline 中"""
    context: String
}

input RegisterByUsernameInput {
    username: String!
    password: String!
    profile: RegisterProfile
    forceLogin: Boolean
    generateToken: Boolean
    clientIp: String

    """设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式"""
    params: String

    """请求上下文信息，将会传递到 pipeline 中"""
    context: String
}

input RegisterProfile {
    ip: String
    oauth: String
    username: String
    nickname: String
    company: String
    photo: String
    device: String
    browser: String
    name: String
    givenName: String
    familyName: String
    middleName: String
    profile: String
    preferredUsername: String
    website: String
    gender: String
    birthdate: String
    zoneinfo: String
    locale: String
    address: String
    formatted: String
    streetAddress: String
    locality: String
    region: String
    postalCode: String
    country: String
    udf: [UserDdfInput!]
}

type RegisterWhiteListConfig {
    """是否开启手机号注册白名单"""
    phoneEnabled: Boolean

    """是否开启邮箱注册白名单"""
    emailEnabled: Boolean

    """是否开用户名注册白名单"""
    usernameEnabled: Boolean
}

input RegisterWhiteListConfigInput {
    phoneEnabled: Boolean
    emailEnabled: Boolean
    usernameEnabled: Boolean
}

type ResourcePermissionAssignment {
    targetType: PolicyAssignmentTargetType
    targetIdentifier: String
    actions: [String!]
}

enum ResourceType {
    DATA
    API
    MENU
    UI
    BUTTON
}

type Role {
    id: String!

    """权限组 code"""
    namespace: String!

    """唯一标志 code"""
    code: String!

    """资源描述符 arn"""
    arn: String!

    """角色描述"""
    description: String

    """是否为系统内建，系统内建的角色不能删除"""
    isSystem: Boolean

    """创建时间"""
    createdAt: String

    """修改时间"""
    updatedAt: String

    """被授予此角色的用户列表"""
    users(page: Int, limit: Int): PaginatedUsers!

    """被授权访问的所有资源"""
    authorizedResources(resourceType: String): PaginatedAuthorizedResources

    """父角色"""
    parent: Role
}

input SearchUserDepartmentOpt {
    departmentId: String
    includeChildrenDepartments: Boolean
}

input SearchUserGroupOpt {
    code: String
}

input SearchUserRoleOpt {
    namespace: String
    code: String!
}

input SetUdfValueBatchInput {
    targetId: String!
    key: String!
    value: String!
}

type SocialConnection {
    """社会化登录服务商唯一标志"""
    provider: String!

    """名称"""
    name: String!

    """logo"""
    logo: String!

    """描述信息"""
    description: String

    """表单字段"""
    fields: [SocialConnectionField!]
}

type SocialConnectionField {
    key: String
    label: String
    type: String
    placeholder: String
    children: [SocialConnectionField]
}

input SocialConnectionFieldInput {
    key: String
    label: String
    type: String
    placeholder: String
    children: [SocialConnectionFieldInput]
}

type SocialConnectionInstance {
    provider: String!
    enabled: Boolean!
    fields: [SocialConnectionInstanceField]
}

type SocialConnectionInstanceField {
    key: String!
    value: String!
}

enum SortByEnum {
    """按照创建时间降序（后创建的在前面）"""
    CREATEDAT_DESC

    """按照创建时间升序（先创建的在前面）"""
    CREATEDAT_ASC

    """按照更新时间降序（最近更新的在前面）"""
    UPDATEDAT_DESC

    """按照更新时间升序（最近更新的在后面）"""
    UPDATEDAT_ASC
}

enum UDFDataType {
    STRING
    NUMBER
    DATETIME
    BOOLEAN
    OBJECT
}

enum UDFTargetType {
    NODE
    ORG
    USER
    USERPOOL
    ROLE
    PERMISSION
    APPLICATION
}

input UpdateFunctionInput {
    """ID"""
    id: String!

    """函数名称"""
    name: String

    """源代码"""
    sourceCode: String

    """描述信息"""
    description: String

    """云函数链接"""
    url: String
}

input UpdateUserInput {
    """邮箱。直接修改用户邮箱需要管理员权限，普通用户修改邮箱请使用 **updateEmail** 接口。"""
    email: String
    unionid: String
    openid: String

    """邮箱是否已验证。直接修改 emailVerified 需要管理员权限。"""
    emailVerified: Boolean

    """手机号。直接修改用户手机号需要管理员权限，普通用户修改邮箱请使用 **updatePhone** 接口。"""
    phone: String

    """手机号是否已验证。直接修改 **phoneVerified** 需要管理员权限。"""
    phoneVerified: Boolean

    """用户名，用户池内唯一"""
    username: String

    """昵称，该字段不唯一。"""
    nickname: String

    """密码。直接修改用户密码需要管理员权限，普通用户修改邮箱请使用 **updatePassword** 接口。"""
    password: String

    """头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png"""
    photo: String

    """注册方式"""
    company: String
    browser: String
    device: String
    oauth: String
    tokenExpiredAt: String

    """用户累计登录次数，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。"""
    loginsCount: Int
    lastLogin: String
    lastIP: String

    """用户注册时间，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。"""
    blocked: Boolean
    name: String
    givenName: String
    familyName: String
    middleName: String
    profile: String
    preferredUsername: String
    website: String
    gender: String
    birthdate: String
    zoneinfo: String
    locale: String
    address: String
    formatted: String
    streetAddress: String
    locality: String
    region: String
    postalCode: String
    city: String
    province: String
    country: String
    externalId: String
}

input UpdateUserpoolInput {
    name: String
    logo: String
    domain: String
    description: String
    userpoolTypes: [String!]
    emailVerifiedDefault: Boolean
    sendWelcomeEmail: Boolean
    registerDisabled: Boolean

    """@deprecated"""
    appSsoEnabled: Boolean
    allowedOrigins: String
    tokenExpiresAfter: Int
    frequentRegisterCheck: FrequentRegisterCheckConfigInput
    loginFailCheck: LoginFailCheckConfigInput
    loginFailStrategy: String
    loginPasswordFailCheck: LoginPasswordFailCheckConfigInput
    changePhoneStrategy: ChangePhoneStrategyInput
    changeEmailStrategy: ChangeEmailStrategyInput
    qrcodeLoginStrategy: QrcodeLoginStrategyInput
    app2WxappLoginStrategy: App2WxappLoginStrategyInput
    whitelist: RegisterWhiteListConfigInput

    """自定义短信服务商配置"""
    customSMSProvider: CustomSMSProviderInput

    """是否要求邮箱必须验证才能登录（如果是通过邮箱登录的话）"""
    loginRequireEmailVerified: Boolean
    verifyCodeLength: Int
}

type User {
    """用户 ID"""
    id: String!
    arn: String!

    """用户在组织机构中的状态"""
    status: UserStatus

    """用户池 ID"""
    userPoolId: String!

    """用户名，用户池内唯一"""
    username: String

    """邮箱，用户池内唯一"""
    email: String

    """邮箱是否已验证"""
    emailVerified: Boolean

    """手机号，用户池内唯一"""
    phone: String

    """手机号是否已验证"""
    phoneVerified: Boolean
    unionid: String
    openid: String

    """用户的身份信息"""
    identities: [Identity]

    """昵称，该字段不唯一。"""
    nickname: String

    """注册方式"""
    registerSource: [String!]

    """头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png"""
    photo: String

    """用户密码，数据库使用密钥加 salt 进行加密，非原文密码。"""
    password: String

    """用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。"""
    oauth: String

    """
    用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
    """
    token: String

    """token 过期时间"""
    tokenExpiredAt: String

    """用户登录总次数"""
    loginsCount: Int

    """用户最近一次登录时间"""
    lastLogin: String

    """用户上一次登录时使用的 IP"""
    lastIP: String

    """用户注册时间"""
    signedUp: String

    """该账号是否被禁用"""
    blocked: Boolean

    """账号是否被软删除"""
    isDeleted: Boolean
    device: String
    browser: String
    company: String
    name: String
    givenName: String
    familyName: String
    middleName: String
    profile: String
    preferredUsername: String
    website: String
    gender: String
    birthdate: String
    zoneinfo: String
    locale: String
    address: String
    formatted: String
    streetAddress: String
    locality: String
    region: String
    postalCode: String
    city: String
    province: String
    country: String
    createdAt: String
    updatedAt: String

    """用户所在的角色列表"""
    roles(namespace: String): PaginatedRoles

    """用户所在的分组列表"""
    groups: PaginatedGroups

    """用户所在的部门列表"""
    departments(orgId: String): PaginatedDepartments

    """被授权访问的所有资源"""
    authorizedResources(namespace: String, resourceType: String): PaginatedAuthorizedResources

    """用户外部 ID"""
    externalId: String

    """用户自定义数据"""
    customData: [UserCustomData]
}

type UserCustomData {
    key: String!
    value: String
    label: String
    dataType: UDFDataType!
}

input UserDdfInput {
    key: String!
    value: String!
}

type UserDefinedData {
    key: String!
    dataType: UDFDataType!
    value: String!
    label: String
}

input UserDefinedDataInput {
    key: String!
    value: String
}

type UserDefinedDataMap {
    targetId: String!
    data: [UserDefinedData!]!
}

type UserDefinedField {
    targetType: UDFTargetType!
    dataType: UDFDataType!
    key: String!
    label: String
    options: String
}

type UserDepartment {
    department: Node!

    """是否为主部门"""
    isMainDepartment: Boolean!

    """加入该部门的时间"""
    joinedAt: String
}

type UserPool {
    id: String!
    name: String!
    domain: String!
    description: String
    secret: String!
    jwtSecret: String!
    ownerId: String
    userpoolTypes: [UserPoolType!]
    logo: String!
    createdAt: String
    updatedAt: String

    """用户邮箱是否验证（用户的 emailVerified 字段）默认值，默认为 false"""
    emailVerifiedDefault: Boolean!

    """用户注册之后是否发送欢迎邮件"""
    sendWelcomeEmail: Boolean!

    """是否关闭注册"""
    registerDisabled: Boolean!

    """@deprecated 是否开启用户池下应用间单点登录"""
    appSsoEnabled: Boolean!

    """
    用户池禁止注册后，是否还显示微信小程序扫码登录。当 **showWXMPQRCode** 为 **true** 时，
    前端显示小程序码，此时只有以前允许注册时，扫码登录过的用户可以继续登录；新用户扫码无法登录。
    """
    showWxQRCodeWhenRegisterDisabled: Boolean

    """前端跨域请求白名单"""
    allowedOrigins: String

    """用户 **token** 有效时间，单位为秒，默认为 15 天。"""
    tokenExpiresAfter: Int

    """是否已删除"""
    isDeleted: Boolean

    """注册频繁检测"""
    frequentRegisterCheck: FrequentRegisterCheckConfig

    """登录失败检测"""
    loginFailCheck: LoginFailCheckConfig

    """登录失败检测"""
    loginPasswordFailCheck: LoginPasswordFailCheckConfig

    """密码安全策略"""
    loginFailStrategy: String

    """手机号修改策略"""
    changePhoneStrategy: ChangePhoneStrategy

    """邮箱修改策略"""
    changeEmailStrategy: ChangeEmailStrategy

    """APP 扫码登录配置"""
    qrcodeLoginStrategy: QrcodeLoginStrategy

    """APP 拉起小程序登录配置"""
    app2WxappLoginStrategy: App2WxappLoginStrategy

    """注册白名单配置"""
    whitelist: RegisterWhiteListConfig

    """自定义短信服务商配置"""
    customSMSProvider: CustomSMSProvider

    """用户池套餐类型"""
    packageType: Int

    """是否使用自定义数据库 CUSTOM_USER_STORE 模式"""
    useCustomUserStore: Boolean

    """是否要求邮箱必须验证才能登录（如果是通过邮箱登录的话）"""
    loginRequireEmailVerified: Boolean

    """短信验证码长度"""
    verifyCodeLength: Int
}

type UserPoolType {
    code: String
    name: String
    description: String
    image: String
    sdks: [String]
}

enum UserStatus {
    """已停用"""
    Suspended

    """已离职"""
    Resigned

    """已激活（正常状态）"""
    Activated

    """已归档"""
    Archived
}

type WhiteList {
    createdAt: String
    updatedAt: String
    value: String!
}

enum WhitelistType {
    USERNAME
    EMAIL
    PHONE
}

